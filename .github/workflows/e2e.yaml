name: CD3 E2E Testing

on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      run_deploy_rm_stack:
        description: 'Run Deploy_RM_Stack job (true/false)'
        required: true
        default: 'true'
      instance_ocid:
        description: 'OCI Instance OCID (required if run_deploy_rm_stack is false)'
        required: false
      instance_ip:
        description: 'Instance Private IP (required if run_deploy_rm_stack is false)'
        required: false

jobs:
  Deploy_RM_Stack:
    runs-on: [self-hosted]
    if: ${{ inputs.run_deploy_rm_stack == 'true' }}
    outputs:
      stack_id: ${{ steps.create-stack.outputs.stack_id }}
      instance_ocid: ${{ steps.get-instance-ocid.outputs.instance_ocid }}
      instance_ip: ${{ steps.get-ip.outputs.instance_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Print runner info
        run: |
          echo "Running on $(hostname)"
          uname -a
      - name: Verify Python installation
        run: |
          python3 --version
          which python3
      - name: Ensure OCI CLI is installed
        run: |
          if ! command -v oci &> /dev/null; then
            curl -L -o oci_install.sh https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
            chmod +x oci_install.sh
            ./oci_install.sh --accept-all-defaults
            export PATH=$HOME/bin:$PATH
          fi
      - name: Install git (Oracle Linux)
        run: |
          if ! command -v git &> /dev/null; then
            sudo yum install -y git
          fi
      - name: Generate Temporary SSH Key Pair
        run: |
          ssh-keygen -t rsa -b 4096 -f temp-ssh-key -N "" -C "temp-key-for-oci" > /dev/null 2>&1
          echo "TEMP_SSH_PUBLIC_KEY=$(cat temp-ssh-key.pub)" >> $GITHUB_ENV
          base64 -w0 temp-ssh-key > temp-ssh-key.txt
          echo "::add-mask::$(cat temp-ssh-key.pub)" >> $GITHUB_OUTPUT
      - name: Upload SSH Private Key Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-private-key
          path: temp-ssh-key.txt
          retention-days: 1
      - name: Retrieve secret contents from OCI Vault
        env:
          TENANCY_SECRET_OCID: ${{ secrets.TENANCY_SECRET_OCID }}
          USER_SECRET_OCID: ${{ secrets.USER_SECRET_OCID }}
          COMPARTMENT_SECRET_OCID: ${{ secrets.COMPARTMENT_SECRET_OCID }}
          VCN_COMPARTMENT_SECRET_OCID: ${{ secrets.VCN_COMPARTMENT_SECRET_OCID }}
          VCN_ID_SECRET_OCID: ${{ secrets.VCN_ID_SECRET_OCID }}
          SUBNET_ID_SECRET_OCID: ${{ secrets.SUBNET_ID_SECRET_OCID }}
          OCI_REGION: us-phoenix-1
        run: |
          for OCID in "$TENANCY_SECRET_OCID" "$USER_SECRET_OCID" "$COMPARTMENT_SECRET_OCID" "$VCN_COMPARTMENT_SECRET_OCID" "$VCN_ID_SECRET_OCID" "$SUBNET_ID_SECRET_OCID"; do
            if [ -z "$OCID" ]; then
              echo "Error: One or more secret OCIDs not set in GitHub Secrets"
              exit 1
            fi
          done
          TENANCY_OCID=$(oci secrets secret-bundle get --secret-id "$TENANCY_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode 2>/dev/null)
          USER_OCID=$(oci secrets secret-bundle get --secret-id "$USER_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode 2>/dev/null)
          COMPARTMENT_OCID=$(oci secrets secret-bundle get --secret-id "$COMPARTMENT_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode 2>/dev/null)
          VCN_COMPARTMENT_OCID=$(oci secrets secret-bundle get --secret-id "$VCN_COMPARTMENT_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode 2>/dev/null)
          EXISTING_VCN_ID=$(oci secrets secret-bundle get --secret-id "$VCN_ID_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode 2>/dev/null)
          EXISTING_SUBNET_ID=$(oci secrets secret-bundle get --secret-id "$SUBNET_ID_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode 2>/dev/null)
          for VALUE in "$COMPARTMENT_OCID" "$VCN_COMPARTMENT_OCID" "$EXISTING_VCN_ID" "$EXISTING_SUBNET_ID"; do
            if [ -z "$VALUE" ]; then
              echo "Error: One or more secret values are empty"
              exit 1
            fi
          done
          jq -n \
            --arg instance_compartment_ocid "$COMPARTMENT_OCID" \
            --arg vcn_compartment_ocid "$VCN_COMPARTMENT_OCID" \
            --arg existing_vcn_id "$EXISTING_VCN_ID" \
            --arg existing_subnet_id "$EXISTING_SUBNET_ID" \
            --arg ssh_public_key "${{ env.TEMP_SSH_PUBLIC_KEY }}" \
            --arg tenancy_ocid "$TENANCY_OCID" \
            --arg user_ocid "$USER_OCID" \
            --arg region "$OCI_REGION" \
            --arg source_cidr '["10.0.0.0/24"]' \
            --arg instance_name "workvm-${{ github.run_id }}" \
            '{
              instance_compartment_strategy: "Use Existing Compartment",
              tenancy_ocid: $tenancy_ocid,
              current_user_ocid: $user_ocid,
              region: $region,
              instance_compartment_ocid: $instance_compartment_ocid,
              parent_compartment_ocid: "",
              new_compartment_name: "",
              instance_name: $instance_name,
              instance_os_version: "Oracle-Linux-9",
              instance_shape: "VM.Standard3.Flex",
              instance_ocpus: 2,
              instance_ram: 8,
              boot_volume_size: 50,
              instance_ad: "wdWU:PHX-AD-1",
              instance_fd: "FAULT-DOMAIN-1",
              ssh_public_key: $ssh_public_key,
              vcn_strategy: "Use Existing VCN",
              vcn_compartment_ocid: $vcn_compartment_ocid,
              existing_vcn_id: $existing_vcn_id,
              existing_subnet_id: $existing_subnet_id,
              assign_publicip_existing_subnet: true,
              assign_existing_nsg: false,
              existing_nsg_id: "",
              vcn_name: "",
              vcn_cidr: "",
              vcn_dns_label: "",
              subnet_name: "",
              subnet_cidr: "",
              subnet_dns_label: "",
              subnet_type: "",
              assign_public_ip: true,
              drg_attachment: false,
              existing_drg_id: "",
              source_cidr: $source_cidr
            }' > variables.json
      - name: Set ZIP URL
        run: |
          echo "github.ref is: ${{ github.ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ZIP_URL=https://github.com/oracle-devrel/cd3-automation-toolkit/archive/refs/heads/main.zip" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "ZIP_URL=https://github.com/oracle-devrel/cd3-automation-toolkit/archive/refs/heads/testUpgrade.zip" >> $GITHUB_ENV
          else
            echo "ZIP_URL=https://github.com/oracle-devrel/cd3-automation-toolkit/archive/refs/heads/main.zip" >> $GITHUB_ENV
            echo "⚠️ Warning: Defaulting ZIP_URL to main.zip as fallback."
          fi
      - name: Create Resource Manager Stack
        id: create-stack
        env:
          OCI_REGION: us-phoenix-1
        run: |
          set -e
          git clone https://github.com/oracle-devrel/cd3-automation-toolkit.git
          cd cd3-automation-toolkit/OCIWorkVMStack
          zip -r ../../../cd3_stack.zip .
          cd ../../../
          COMPARTMENT_OCID=$(jq -r '.instance_compartment_ocid' $GITHUB_WORKSPACE/variables.json)
          echo "Creating new stack..."
          STACK_ID=$(oci resource-manager stack create \
            --auth instance_principal \
            --compartment-id "$COMPARTMENT_OCID" \
            --config-source cd3_stack.zip \
            --variables file://$GITHUB_WORKSPACE/variables.json \
            --display-name "CD3-WorkVM-Stack-${{ github.ref_name }}-${{ github.run_id }}" \
            --description "Automated CD3 WorkVM Stack for ${{ github.ref_name }}-${{ github.run_id }}" \
            --terraform-version "1.2.x" \
            --region "$OCI_REGION" \
            --query "data.id" --raw-output)
          if [ -z "$STACK_ID" ]; then
            echo "❌ Error: Stack creation failed"
            exit 1
          fi
          echo "✅ STACK_ID: $STACK_ID"
          echo "stack_id=$STACK_ID" >> $GITHUB_OUTPUT
      - name: Apply Resource Manager Stack
        id: apply-stack
        env:
          OCI_REGION: us-phoenix-1
        run: |
          set -e
          STACK_ID=${{ steps.create-stack.outputs.stack_id }}
          echo "Applying Resource Manager stack $STACK_ID in region $OCI_REGION"
          JOB_ID=$(oci resource-manager job create-apply-job \
            --auth instance_principal \
            --stack-id "$STACK_ID" \
            --execution-plan-strategy AUTO_APPROVED \
            --region "$OCI_REGION" \
            --query "data.id" --raw-output)
          if [ -z "$JOB_ID" ]; then
            echo "❌ Error: Failed to create apply job"
            exit 1
          fi
          echo "Waiting for apply job $JOB_ID to complete..."
          for attempt in {1..40}; do
            JOB_STATUS=$(oci resource-manager job get \
              --job-id "$JOB_ID" \
              --auth instance_principal \
              --region "$OCI_REGION" \
              --query "data.\"lifecycle-state\"" \
              --raw-output)
            echo "Apply job status (attempt $attempt/40): $JOB_STATUS"
            if [ "$JOB_STATUS" = "SUCCEEDED" ]; then
              echo "✅ Stack apply job completed successfully"
              break
            elif [ "$JOB_STATUS" = "FAILED" ]; then
              echo "❌ Stack apply job failed"
              JOB_DETAILS=$(oci resource-manager job get \
                --job-id "$JOB_ID" \
                --auth instance_principal \
                --region "$OCI_REGION" \
                --query "data.\"job-operation-details\"" \
                --raw-output)
              echo "Job details: $JOB_DETAILS"
              exit 1
            fi
            if [ $attempt -eq 40 ]; then
              echo "❌ Stack apply job did not complete after 40 attempts"
              exit 1
            fi
            echo "Waiting 60 seconds before next check..."
            sleep 60
          done
      - name: Get Instance OCID
        id: get-instance-ocid
        env:
          OCI_REGION: us-phoenix-1
        run: |
          COMPARTMENT_OCID=$(jq -r '.instance_compartment_ocid' $GITHUB_WORKSPACE/variables.json)
          INSTANCE_OCID=$(oci compute instance list \
            --compartment-id "$COMPARTMENT_OCID" \
            --region "$OCI_REGION" \
            --auth instance_principal \
            --query "data[?\"display-name\"=='workvm-${{ github.run_id }}'] | [0].id" \
            --raw-output)
          if [ -z "$INSTANCE_OCID" ]; then
            echo "❌ Instance 'workvm-${{ github.run_id }}' not found."
            exit 1
          fi
          echo "instance_ocid=$INSTANCE_OCID" >> $GITHUB_OUTPUT
      - name: Get Instance Private IP
        id: get-ip
        env:
          OCI_REGION: us-phoenix-1
        run: |
          INSTANCE_OCID=${{ steps.get-instance-ocid.outputs.instance_ocid }}
          IP=$(oci compute instance list-vnics \
            --instance-id "$INSTANCE_OCID" \
            --auth instance_principal \
            --region "$OCI_REGION" \
            --query "data[0].\"private-ip\"" \
            --raw-output 2>/dev/null)
          if [ -z "$IP" ]; then
            echo "Error: Could not retrieve private IP for instance."
            exit 1
          fi
          echo "instance_ip=$IP" >> $GITHUB_OUTPUT
          echo "Found private IP: $IP"
      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f variables.json
          rm -f cd3_stack.zip
          rm -f temp-ssh-key temp-ssh-key.pub temp-ssh-key.txt
          rm -rf "$GITHUB_WORKSPACE/stack_id.txt"
      - name: Say hello
        run: echo "✅ Self-hosted runner is working!"

  CD3_Bootstrap:
    runs-on: self-hosted
    needs: Deploy_RM_Stack
    if: always() # Run even if Deploy_RM_Stack is skipped
    env:
      OCI_REGION: us-phoenix-1
      INSTANCE_NAME: workvm-${{ github.run_id }}
      INSTANCE_OCID: ${{ inputs.run_deploy_rm_stack == 'true' && needs.Deploy_RM_Stack.outputs.instance_ocid || inputs.instance_ocid }}
      INSTANCE_IP: ${{ inputs.run_deploy_rm_stack == 'true' && needs.Deploy_RM_Stack.outputs.instance_ip || inputs.instance_ip }}
    steps:
      - name: Validate Inputs
        run: |
          if [ "${{ inputs.run_deploy_rm_stack }}" == "false" ]; then
            if [ -z "${{ env.INSTANCE_OCID }}" ] || [ -z "${{ env.INSTANCE_IP }}" ]; then
              echo "Error: instance_ocid and instance_ip are required when run_deploy_rm_stack is false"
              exit 1
            fi
            echo "Using provided instance_ocid: ${{ env.INSTANCE_OCID }} and instance_ip: ${{ env.INSTANCE_IP }}"
          fi
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - name: Log Workflow File
        run: |
          cat .github/workflows/e2e.yaml > /tmp/workflow_content.log
          echo "Workflow file content logged to /tmp/workflow_content.log"
      - name: Reset Runner Environment
        run: |
          echo "Resetting runner environment..."
          rm -rf ~/.ssh/known_hosts 2>/dev/null || true
          rm -f /tmp/cd3_* /tmp/shell_env_* /tmp/oci_config_* /tmp/secret_precheck_* /tmp/secret_temp_* 2>/dev/null || true
          echo "Runner environment reset complete"
      - name: Log Shell Environment
        run: |
          LOG_FILE="/tmp/shell_env_$(date +%F_%H-%M-%S).log"
          echo "Shell: $SHELL" | tee -a "$LOG_FILE"
          echo "Environment variables:" | tee -a "$LOG_FILE"
          env | sort >> "$LOG_FILE"
          echo "Shell environment logged to $LOG_FILE"
      - name: Verify OCI CLI Configuration
        run: |
          LOG_FILE="/tmp/oci_config_$(date +%F_%H-%M-%S).log"
          echo "OCI CLI version:" | tee -a "$LOG_FILE"
          oci --version >> "$LOG_FILE" 2>&1
          echo "Checking instance principal authentication..." | tee -a "$LOG_FILE"
          oci iam compartment list --auth instance_principal --region us-phoenix-1 --query "data[0].id" --raw-output >> "$LOG_FILE" 2>&1 || echo "Instance principal auth failed" | tee -a "$LOG_FILE"
          echo "OCI CLI configuration logged to $LOG_FILE"
      - name: Pre-check Secrets Injection
        env:
          TENANCY_SECRET_OCID: ${{ secrets.TENANCY_SECRET_OCID }}
          USER_SECRET_OCID: ${{ secrets.USER_SECRET_OCID }}
          FINGERPRINT_SECRET_OCID: ${{ secrets.FINGERPRINT_SECRET_OCID }}
          API_SECRET_OCID: ${{ secrets.API_SECRET_OCID }}
        shell: bash
        run: |
          LOG_FILE="/tmp/secret_precheck_$(date +%F_%H-%M-%S).log"
          for SECRET_NAME in TENANCY_SECRET_OCID USER_SECRET_OCID FINGERPRINT_SECRET_OCID API_SECRET_OCID; do
            eval SECRET_VALUE=\$$SECRET_NAME
            if [ -z "${SECRET_VALUE+x}" ]; then
              echo "Error: $SECRET_NAME is not injected" | tee -a "$LOG_FILE"
              exit 1
            fi
            if [ -z "$SECRET_VALUE" ]; then
              echo "Error: $SECRET_NAME is injected but empty" | tee -a "$LOG_FILE"
              exit 1
            fi
            echo "$SECRET_NAME is injected and non-empty" | tee -a "$LOG_FILE"
          done
          echo "Secrets pre-check logged to $LOG_FILE"
      - name: Download SSH Private Key Artifact
        if: ${{ inputs.run_deploy_rm_stack == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: ssh-private-key
          path: .
      - name: Configure SSH Key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          if [ "${{ inputs.run_deploy_rm_stack }}" == "true" ]; then
            base64 -d temp-ssh-key.txt > ~/.ssh/temp-id_rsa
          else
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/temp-id_rsa
          fi
          chmod 600 ~/.ssh/temp-id_rsa
      - name: Wait for Instance to be Ready
        run: |
          for attempt in {1..5}; do
            echo "Checking instance status (attempt $attempt/5)..."
            STATUS=$(oci compute instance get \
              --instance-id "${{ env.INSTANCE_OCID }}" \
              --auth instance_principal \
              --region "$OCI_REGION" \
              --query "data.\"lifecycle-state\"" \
              --raw-output 2>/dev/null)
            if [ "$STATUS" = "RUNNING" ]; then
              echo "✅ Instance is running"
              break
            fi
            if [ $attempt -eq 5 ]; then
              echo "❌ Instance not running after 5 attempts"
              exit 1
            fi
            echo "Instance not ready, waiting 5 minutes..."
            sleep 300
          done
      - name: Test SSH Connection
        run: |
          ssh-keyscan -H "${{ env.INSTANCE_IP }}" >> ~/.ssh/known_hosts 2>/dev/null || true
          if ssh -i ~/.ssh/temp-id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 opc@${{ env.INSTANCE_IP }} exit 2>/dev/null; then
            echo "SSH connection okay"
          else
            echo "Error: SSH connection failed"
            exit 1
          fi
      - name: Debug Secrets Availability
        env:
          TENANCY_SECRET_OCID: ${{ secrets.TENANCY_SECRET_OCID }}
          USER_SECRET_OCID: ${{ secrets.USER_SECRET_OCID }}
          FINGERPRINT_SECRET_OCID: ${{ secrets.FINGERPRINT_SECRET_OCID }}
          API_SECRET_OCID: ${{ secrets.API_SECRET_OCID }}
        shell: bash
        run: |
          set -e
          LOG_FILE="/tmp/cd3_debug_$(date +%F_%H-%M-%S).log"
          echo "Debugging secrets availability" | tee -a "$LOG_FILE"
          for VAR in TENANCY_SECRET_OCID USER_SECRET_OCID FINGERPRINT_SECRET_OCID API_SECRET_OCID; do
            if [ ! -z "${!VAR+x}" ]; then
              echo "$VAR is set: 1" | tee -a "$LOG_FILE"
            else
              echo "$VAR is set: 0" | tee -a "$LOG_FILE"
            fi
            echo "$VAR length: ${#${!VAR}}" | tee -a "$LOG_FILE"
          done
          echo "Environment variables (masked):" | tee -a "$LOG_FILE"
          env | grep -E 'TENANCY_SECRET_OCID|USER_SECRET_OCID|FINGERPRINT_SECRET_OCID|API_SECRET_OCID' | tee -a "$LOG_FILE" || echo "No relevant variables found" | tee -a "$LOG_FILE"
      - name: Setup CD3 Automation Toolkit
        env:
          TENANCY_SECRET_OCID: ${{ secrets.TENANCY_SECRET_OCID }}
          USER_SECRET_OCID: ${{ secrets.USER_SECRET_OCID }}
          FINGERPRINT_SECRET_OCID: ${{ secrets.FINGERPRINT_SECRET_OCID }}
          API_SECRET_OCID: ${{ secrets.API_SECRET_OCID }}
        shell: bash
        run: |
          set -e
          LOG_FILE="/tmp/cd3_setup_$(date +%F_%H-%M-%S).log"
          export TENANCY_SECRET_OCID="$TENANCY_SECRET_OCID"
          export USER_SECRET_OCID="$USER_SECRET_OCID"
          export FINGERPRINT_SECRET_OCID="$FINGERPRINT_SECRET_OCID"
          export API_SECRET_OCID="$API_SECRET_OCID"
          echo "Verifying secrets" | tee -a "$LOG_FILE"
          for VAR in TENANCY_SECRET_OCID USER_SECRET_OCID FINGERPRINT_SECRET_OCID API_SECRET_OCID; do
            if [ ! -z "${!VAR+x}" ]; then
              echo "$VAR is set: 1" | tee -a "$LOG_FILE"
            else
              echo "$VAR is set: 0" | tee -a "$LOG_FILE"
              exit 1
            fi
            echo "$VAR length: ${#${!VAR}}" | tee -a "$LOG_FILE"
            if [ -z "${!VAR}" ]; then
              echo "Error: $VAR is set but empty" | tee -a "$LOG_FILE"
              exit 1
            fi
            echo "::add-mask::${!VAR}"
          done
          TEMP_SECRET_FILE="/tmp/secret_temp_$(date +%F_%H-%M-%S).txt"
          echo "Retrieving secrets from OCI Vault" | tee -a "$LOG_FILE"
          oci secrets secret-bundle get --secret-id "$TENANCY_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output > "$TEMP_SECRET_FILE" 2>>"$LOG_FILE" || { echo "Error: Failed to retrieve TENANCY_SECRET_OCID from OCI Vault" | tee -a "$LOG_FILE"; exit 1; }
          tenancy_ocid=$(base64 --decode "$TEMP_SECRET_FILE" 2>>"$LOG_FILE")
          echo "::add-mask::$tenancy_ocid"
          oci secrets secret-bundle get --secret-id "$USER_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output > "$TEMP_SECRET_FILE" 2>>"$LOG_FILE" || { echo "Error: Failed to retrieve USER_SECRET_OCID from OCI Vault" | tee -a "$LOG_FILE"; exit 1; }
          user_ocid=$(base64 --decode "$TEMP_SECRET_FILE" 2>>"$LOG_FILE")
          echo "::add-mask::$user_ocid"
          oci secrets secret-bundle get --secret-id "$FINGERPRINT_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output > "$TEMP_SECRET_FILE" 2>>"$LOG_FILE" || { echo "Error: Failed to retrieve FINGERPRINT_SECRET_OCID from OCI Vault" | tee -a "$LOG_FILE"; exit 1; }
          fingerprint=$(base64 --decode "$TEMP_SECRET_FILE" 2>>"$LOG_FILE")
          echo "::add-mask::$fingerprint"
          oci secrets secret-bundle get --secret-id "$API_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output > "$TEMP_SECRET_FILE" 2>>"$LOG_FILE" || { echo "Error: Failed to retrieve API_SECRET_OCID from OCI Vault" | tee -a "$LOG_FILE"; exit 1; }
          api_private_key=$(base64 --decode "$TEMP_SECRET_FILE" 2>>"$LOG_FILE")
          echo "::add-mask::$api_private_key"
          rm -f "$TEMP_SECRET_FILE"
          for VALUE in "$tenancy_ocid" "$user_ocid" "$fingerprint" "$api_private_key"; do
            if [ -z "$VALUE" ]; then
              echo "Error: One or more secret values are empty after OCI Vault retrieval" | tee -a "$LOG_FILE"
              exit 1
            fi
          done
          cat << EOF > /tmp/oci_api_private.pem
          $api_private_key
          EOF
          chmod 600 /tmp/oci_api_private.pem
          PREFIX="cd3_demo"
          REGION="us-phoenix-1"
          AUTH_MECHANISM="api_key"
          CONTAINER_NAME="cd3_toolkit"
          OUTDIR_STRUCTURE_FILE="/cd3user/oci_tools/cd3_automation_toolkit/user-scripts/outdir_structure_file.properties"
          TF_OR_TOFU="terraform"
          SSH_PUBLIC_KEY="${{ env.TEMP_SSH_PUBLIC_KEY }}"
          CONFIG_FILE="/cd3user/oci_tools/cd3_automation_toolkit/user-scripts/tenancyconfig.properties"
          KEY_DEST_PATH="/cd3user/tenancies/keys/oci_api_private.pem"
          cat << EOF > /tmp/tenancyconfig.properties
          prefix=$PREFIX
          tenancy_ocid=$tenancy_ocid
          region=$REGION
          auth_mechanism=$AUTH_MECHANISM
          user_ocid=$user_ocid
          key_path=$KEY_DEST_PATH
          fingerprint=$fingerprint
          outdir_structure_file=$OUTDIR_STRUCTURE_FILE
          tf_or_tofu=$TF_OR_TOFU
          ssh_public_key=$SSH_PUBLIC_KEY
          EOF
          chmod 600 /tmp/tenancyconfig.properties
          echo "Checking container status" | tee -a "$LOG_FILE"
          container_check=$(ssh -i ~/.ssh/temp-id_rsa -o StrictHostKeyChecking=no opc@${{ env.INSTANCE_IP }} "podman ps | grep $CONTAINER_NAME" 2>>"$LOG_FILE")
          if [ -z "$container_check" ]; then
            echo "Error: Container '$CONTAINER_NAME' not found or not running on ${{ env.INSTANCE_IP }}" | tee -a "$LOG_FILE"
            exit 1
          fi
          CONTAINER_ID=$(ssh -i ~/.ssh/temp-id_rsa -o StrictHostKeyChecking=no opc@${{ env.INSTANCE_IP }} "podman ps -q -f name=$CONTAINER_NAME" 2>>"$LOG_FILE")
          echo "Found container ID: $CONTAINER_ID" | tee -a "$LOG_FILE"
          scp -i ~/.ssh/temp-id_rsa -o StrictHostKeyChecking=no /tmp/oci_api_private.pem opc@${{ env.INSTANCE_IP }}:/tmp/oci_api_private.pem 2>>"$LOG_FILE" || { echo "Error: Failed to SCP private key" | tee -a "$LOG_FILE"; exit 1; }
          ssh -i ~/.ssh/temp-id_rsa -o StrictHostKeyChecking=no opc@${{ env.INSTANCE_IP }} "podman cp /tmp/oci_api_private.pem $CONTAINER_ID:$KEY_DEST_PATH && podman exec $CONTAINER_ID chmod 600 $KEY_DEST_PATH && rm /tmp/oci_api_private.pem" 2>>"$LOG_FILE" || { echo "Error: Failed to copy private key to container" | tee -a "$LOG_FILE"; exit 1; }
          echo "API private key copied to container" | tee -a "$LOG_FILE"
          scp -i ~/.ssh/temp-id_rsa -o StrictHostKeyChecking=no /tmp/tenancyconfig.properties opc@${{ env.INSTANCE_IP }}:/tmp/tenancyconfig.properties 2>>"$LOG_FILE" || { echo "Error: Failed to SCP tenancy config" | tee -a "$LOG_FILE"; exit 1; }
          ssh -i ~/.ssh/temp-id_rsa -o StrictHostKeyChecking=no opc@${{ env.INSTANCE_IP }} "podman cp /tmp/tenancyconfig.properties $CONTAINER_ID:$CONFIG_FILE && rm /tmp/tenancyconfig.properties" 2>>"$LOG_FILE" || { echo "Error: Failed to copy tenancy config to container" | tee -a "$LOG_FILE"; exit 1; }
          echo "tenancyconfig.properties copied to container" | tee -a "$LOG_FILE"
          echo "Running createTenancyConfig.py" | tee -a "$LOG_FILE"
          for i in {1..5}; do
            if ssh -i ~/.ssh/temp-id_rsa -o StrictHostKeyChecking=no opc@${{ env.INSTANCE_IP }} "podman exec $CONTAINER_ID bash -c 'cd /cd3user/oci_tools/cd3_automation_toolkit/user-scripts/ && python createTenancyConfig.py tenancyconfig.properties'" >> "$LOG_FILE" 2>&1; then
              echo "Environment initialization completed successfully" | tee -a "$LOG_FILE"
              break
            else
              echo "Retrying ($i/5) after 60 seconds due to potential API key propagation delay..." | tee -a "$LOG_FILE"
              sleep 60
            fi
            if [ $i -eq 5 ]; then
              echo "Error: Initialization failed after 5 attempts" | tee -a "$LOG_FILE"
              exit 1
            fi
          done
          ssh -i ~/.ssh/temp-id_rsa -o StrictHostKeyChecking=no opc@${{ env.INSTANCE_IP }} "podman exec $CONTAINER_ID ls -l /cd3user/tenancies/$PREFIX/" >> "$LOG_FILE" 2>&1 || { echo "Error: Failed to list output directory" | tee -a "$LOG_FILE"; exit 1; }
          echo "Setup complete. Output files logged in $LOG_FILE" | tee -a "$LOG_FILE"
          rm -f /tmp/oci_api_private.pem /tmp/tenancyconfig.properties
          echo "Cleaned up temporary files" | tee -a "$LOG_FILE"
          echo "Checking logs for private key exposure" | tee -a "$LOG_FILE"
          if grep -q -e "-----BEGIN PRIVATE KEY-----" -e "$(echo "$api_private_key" | head -n 1)" /tmp/cd3_* /tmp/oci_config_* /tmp/secret_precheck_* /tmp/shell_env_* 2>/dev/null; then
            echo "Error: Private key found in log files" | tee -a "$LOG_FILE"
            exit 1
          fi
      - name: Cleanup SSH Key
        if: always()
        run: |
          rm -f ~/.ssh/temp-id_rsa
          echo "Temporary SSH keys deleted"
