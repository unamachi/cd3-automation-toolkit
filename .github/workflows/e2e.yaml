name: Self-hosted Runner Test

on:
  push:
    branches:
      - master
      - develop
  workflow_dispatch:

jobs:
  Deploy_RM_Stack:
    runs-on: [self-hosted]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print runner info
        run: |
          echo "Running on $(hostname)"
          uname -a

      - name: Verify Python installation
        run: |
          python3 --version
          which python3

      - name: Ensure OCI CLI is installed
        run: |
          if ! command -v oci &> /dev/null; then
            curl -L -o oci_install.sh https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
            chmod +x oci_install.sh
            ./oci_install.sh --accept-all-defaults
            export PATH=$HOME/bin:$PATH
          fi

      - name: Install git (Oracle Linux)
        run: |
          if ! command -v git &> /dev/null; then
            sudo yum install -y git
          fi

      - name: Retrieve secret contents from OCI Vault
        env:
          TENANCY_SECRET_OCID: ${{ secrets.TENANCY_SECRET_OCID }}
          USER_SECRET_OCID: ${{ secrets.USER_SECRET_OCID }}
          COMPARTMENT_SECRET_OCID: ${{ secrets.COMPARTMENT_SECRET_OCID }}
          VCN_COMPARTMENT_SECRET_OCID: ${{ secrets.VCN_COMPARTMENT_SECRET_OCID }}
          VCN_ID_SECRET_OCID: ${{ secrets.VCN_ID_SECRET_OCID }}
          SUBNET_ID_SECRET_OCID: ${{ secrets.SUBNET_ID_SECRET_OCID }}
          SSH_KEY_SECRET_OCID: ${{ secrets.SSH_KEY_SECRET_OCID }}
          OCI_REGION: us-phoenix-1
        run: |
          # Verify secret OCIDs
          for OCID in "$TENANCY_SECRET_OCID" "$USER_SECRET_OCID" "$COMPARTMENT_SECRET_OCID" "$VCN_COMPARTMENT_SECRET_OCID" "$VCN_ID_SECRET_OCID" "$SUBNET_ID_SECRET_OCID" "$SSH_KEY_SECRET_OCID"; do
            if [ -z "$OCID" ]; then
              echo "Error: One or more secret OCIDs not set in GitHub Secrets"
              exit 1
            fi
          done

          # Fetch secret contents
          TENANCY_OCID=$(oci secrets secret-bundle get --secret-id "$TENANCY_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
          USER_OCID=$(oci secrets secret-bundle get --secret-id "$USER_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
          COMPARTMENT_OCID=$(oci secrets secret-bundle get --secret-id "$COMPARTMENT_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
          VCN_COMPARTMENT_OCID=$(oci secrets secret-bundle get --secret-id "$VCN_COMPARTMENT_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
          EXISTING_VCN_ID=$(oci secrets secret-bundle get --secret-id "$VCN_ID_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
          EXISTING_SUBNET_ID=$(oci secrets secret-bundle get --secret-id "$SUBNET_ID_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
          SSH_PUBLIC_KEY=$(oci secrets secret-bundle get --secret-id "$SSH_KEY_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)

          # Verify secret contents
          for VALUE in "$COMPARTMENT_OCID" "$VCN_COMPARTMENT_OCID" "$EXISTING_VCN_ID" "$EXISTING_SUBNET_ID" "$SSH_PUBLIC_KEY"; do
            if [ -z "$VALUE" ]; then
              echo "Error: One or more secret values are empty"
              exit 1
            fi
          done

          # Generate variables.json safely using jq
          jq -n \
            --arg instance_compartment_ocid "$COMPARTMENT_OCID" \
            --arg vcn_compartment_ocid "$VCN_COMPARTMENT_OCID" \
            --arg existing_vcn_id "$EXISTING_VCN_ID" \
            --arg existing_subnet_id "$EXISTING_SUBNET_ID" \
            --arg ssh_public_key "$SSH_PUBLIC_KEY" \
            --arg tenancy_ocid "$TENANCY_OCID" \
            --arg user_ocid "$USER_OCID" \
            --arg region "$OCI_REGION" \
            --arg source_cidr '["10.0.0.0/24"]' \
            '{
              instance_compartment_strategy: "Use Existing Compartment",
              tenancy_ocid: $tenancy_ocid,
              current_user_ocid: $user_ocid,
              region: $region,
              instance_compartment_ocid: $instance_compartment_ocid,
              parent_compartment_ocid: "",
              new_compartment_name: "",
              instance_name: "workvm",
              instance_os_version: "Oracle-Linux-9",
              instance_shape: "VM.Standard3.Flex",
              instance_ocpus: 2,
              instance_ram: 8,
              boot_volume_size: 50,
              instance_ad: "wdWU:PHX-AD-1",
              instance_fd: "FAULT-DOMAIN-1",
              ssh_public_key: $ssh_public_key,
              vcn_strategy: "Use Existing VCN",
              vcn_compartment_ocid: $vcn_compartment_ocid,
              existing_vcn_id: $existing_vcn_id,
              existing_subnet_id: $existing_subnet_id,
              assign_publicip_existing_subnet: true,
              assign_existing_nsg: false,
              existing_nsg_id: "",
              vcn_name: "",
              vcn_cidr: "",
              vcn_dns_label: "",
              subnet_name: "",
              subnet_cidr: "",
              subnet_dns_label: "",
              subnet_type: "",
              assign_public_ip: true,
              drg_attachment: false,
              existing_drg_id: "",
              source_cidr: $source_cidr
            }' > variables.json
  
      - name: Set ZIP URL
        run: |
          echo "github.ref is: ${{ github.ref }}"
          if [[ "${{ github.ref }}" == "refs/heads/master" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ZIP_URL=https://github.com/oracle-devrel/cd3-automation-toolkit/archive/refs/heads/main.zip" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "ZIP_URL=https://github.com/oracle-devrel/cd3-automation-toolkit/archive/refs/heads/testUpgrade.zip" >> $GITHUB_ENV
          else
            echo "ZIP_URL=https://github.com/oracle-devrel/cd3-automation-toolkit/archive/refs/heads/main.zip" >> $GITHUB_ENV
            echo "⚠️ Warning: Defaulting ZIP_URL to main.zip as fallback."
          fi


      - name: Create or Update Resource Manager Stack
        env:
          OCI_REGION: us-phoenix-1
        run: |
          set -e
          # Download the zip file locally
          git clone https://github.com/oracle-devrel/cd3-automation-toolkit.git
          cd cd3-automation-toolkit/OCIWorkVMStack
          zip -r ../../../cd3_stack.zip .
          cd ../../../

      
          COMPARTMENT_OCID=$(jq -r '.instance_compartment_ocid' $GITHUB_WORKSPACE/variables.json)
          # echo "Using COMPARTMENT_OCID: $COMPARTMENT_OCID"
          # echo "Using ZIP_URL: $ZIP_URL"
      
          echo "Attempting to create stack..."
          STACK_ID=$(oci resource-manager stack create \
            --auth instance_principal \
            --compartment-id "$COMPARTMENT_OCID" \
            --config-source cd3_stack.zip \
            --variables file://$GITHUB_WORKSPACE/variables.json \
            --display-name "CD3-WorkVM-Stack-${{ github.ref_name }}-${{ github.run_id }}" \
            --description "Automated CD3 WorkVM Stack for ${{ github.ref_name }}-{{ github.run_id }}" \
            --terraform-version "1.2.x" \
            --region "$OCI_REGION" \
            --query "data.id" --raw-output) 2>/dev/null || true
      
          if [ -z "$STACK_ID" ]; then
            echo "Stack creation failed or already exists. Attempting to find and update existing stack..."
            EXISTING_STACK_ID=$(oci resource-manager stack list \
              --compartment-id "$COMPARTMENT_OCID" \
              --display-name "CD3-WorkVM-Stack-${{ github.ref_name }}-{{ github.run_id }}" \
              --region "$OCI_REGION" \
              --query "data[0].id" --raw-output)
      
            if [ -z "$EXISTING_STACK_ID" ]; then
              echo "❌ Error: No existing stack found to update"
              exit 1
            fi
      
            echo "Updating existing stack: $EXISTING_STACK_ID"
            STACK_ID=$(oci resource-manager stack update \
              --auth instance_principal \
              --stack-id "$EXISTING_STACK_ID" \
              --config-source cd3_stack.zip \
              --variables file://$GITHUB_WORKSPACE/variables.json \
              --terraform-version "1.2.x" \
              --region "$OCI_REGION" \
              --query "data.id" --raw-output)
          fi
      
          echo "✅ STACK_ID: $STACK_ID"
          echo "$STACK_ID" > "$GITHUB_WORKSPACE/stack_id.txt"

      - name: Apply Resource Manager stack
        env:
          OCI_REGION: "us-phoenix-1"
        run: |
          # COMPARTMENT_OCID=$(jq -r '.instance_compartment_ocid' $GITHUB_WORKSPACE/variables.json)
          # STACK_ID=$(oci resource-manager stack list --compartment-id "$COMPARTMENT_OCID" --display-name "CD3-WorkVM-Stack-${{ github.ref_name }}-${{ github.run_id }}" --region "$OCI_REGION" --query "data[0].id" --raw-output)

          # if [ -z "$STACK_ID" ]; then
          #   echo "Error: Stack ID not found for applying"
          #   exit 1
          # fi

          STACK_ID=$(cat "$GITHUB_WORKSPACE/stack_id.txt")
          echo "Applying Resource Manager stack $STACK_ID in region $OCI_REGION"
          oci resource-manager job create-apply-job \
            --auth instance_principal  \
            --stack-id "$STACK_ID" \
            --execution-plan-strategy AUTO_APPROVED \
            --region "$OCI_REGION"

      - name: Create Bastion
        id: create_bastion
        shell: bash
        env:
          COMPARTMENT_SECRET_OCID: ${{ secrets.COMPARTMENT_SECRET_OCID }}
          SUBNET_SECRET_OCID: ${{ secrets.SUBNET_SECRET_OCID }}
          OCI_REGION: "us-phoenix-1"
        run: |
          echo "Creating Bastion in compartment..."

          COMPARTMENT_OCID=$(oci secrets secret-bundle get --secret-id "$COMPARTMENT_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
          SUBNET_OCID=$(oci secrets secret-bundle get --secret-id "$SUBNET_ID_SECRET_OCID" --auth instance_principal --query 'data."secret-bundle-content".content' --raw-output | base64 --decode)
         
          BASTION_ID=$(oci bastion bastion create \
            --name "gh-bastion-${{ github.run_id }}" \
            --compartment-id "$COMPARTMENT_OCID" \
            --target-subnet-id "$SUBNET_OCID" \
            --auth instance_principal \
            --client-cidr-block-allow-list '["0.0.0.0/0"]' \
            --region "$OCI_REGION" \
            --query "data.id" \
            --raw-output)

          echo "bastion_id=$BASTION_ID" >> $GITHUB_OUTPUT
          echo "✅ Bastion created with ID: $BASTION_ID"


      - name: Clean up sensitive files
        if: always()
        run: |
          rm -f variables.json
          rm -f cd3_stack.zip
          rm -rf "$GITHUB_WORKSPACE/stack_id.txt"

      - name: Say hello
        run: echo "✅ Self-hosted runner is working!"
